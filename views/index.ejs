<!DOCTYPE html>
<html xmlns:fb="http://ogp.me/ns/fb#" lang="en">
	<head>
		<title>Flanet Project</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
		<!-- css -->
		<link href="/css/reset.css" type=text/css rel=stylesheet>
		<link href="/css/flanet.css" type=text/css rel=stylesheet>
		<!-- basic library -->
		
		<script type="text/javascript" src="/lib/jquery-1.7.2.js"></script>
		<script type="text/javascript" src="/lib/dev/kinetic-v4.7.4.min.js"></script>
		<script type="text/javascript" src="/lib/box2djs.0.2.0.jquery.min.js"></script>
		<!-- flanet -->
		<script type="text/javascript" src="/lib/dev/flanet-v1.0.6.js"></script>
	</head>
	<body>
		<!-- initialize fb-root -->
		<div id="fb-root"></div>
		<script type="text/javascript">
			window.fbAsyncInit = function() {
				FB.init({
					appId      : '<%= app.id %>',
					status     : true,
					cookie     : true,
					xfbml      : true
				});
				FB.Event.subscribe('auth.login', function(res) {
					window.location = window.location;
				});
				FB.Canvas.setAutoGrow();
			};
			(function(d, s, id) {
				var js, fjs = d.getElementsByTagName(s)[0];
				if (d.getElementById(id)) return;
				js = d.createElement(s); js.id = id;
				js.src = '//connect.facebook.net/en_US/all.js';
				fjs.parentNode.insertBefore(js, fjs);
			}(document, 'script', 'facebook-jssdk'));
		</script>
		<!-- initialize flanet stage -->
		<div id="stage"></div>
		<script>
			var container = $('#stage');
			container.width($(window).width());
			container.height($(window).height());
			var width = container.width();
			var height = container.height();
			var x = width * .5;
			var y = height * .5;
			var scale = 50;
			//flanet initialize
			Flanet.init({ container : 'stage' });
		</script>
		<% if (!user) { %>
			<div class="header">
				<h2>
					Welcome to Flanet Project.
				</h2>
				<h4>
					Flanet is stable in chrome browser.
				</h4>
				<a href="/auth/facebook">
					&gt; Login with Facebook
				</a>
			</div>
			<!-- flanet initiailize -->
			<script src="/js/init.js"></script>
		<% } else { %>
			<div class="header">
				<h2>
					Hello, <%= user.name.givenName %>.
				</h2>
				<h4>
					Flanet is stable in chrome browser.
				</h4>
				<a href="/logout">
					&gt; Logout
				</a>
			</div>
			<!-- flanet fb initiailize -->
			<script>
			var userId = '<%= user.id %>'
				, userName = '<%= user.name.givenName %>'
				, token = '<%= user.token %>';
			</script>
			<script src="/js/fb_init.js"></script>
		<% } %>
		<!-- Flanet start -->

		<script>
			Flanet.start();
		</script>
		<div class="copyright"><p>Flanet v1.0.5<br/>copyright(c) juwon.lee all rights reserved.</p></div>
	</body>
	<script>
		(function ($) {
		    // Detect touch support
		    $.support.touch = 'ontouchend' in document;
		    // Ignore browsers without touch support
		    if (!$.support.touch) {
		    return;
		    }
		    var mouseProto = $.ui.mouse.prototype,
		        _mouseInit = mouseProto._mouseInit,
		        touchHandled;

		    function simulateMouseEvent (event, simulatedType) { //use this function to simulate mouse event
		    // Ignore multi-touch events
		        if (event.originalEvent.touches.length > 1) {
		        return;
		        }
		    event.preventDefault(); //use this to prevent scrolling during ui use

		    var touch = event.originalEvent.changedTouches[0],
		        simulatedEvent = document.createEvent('MouseEvents');
		    // Initialize the simulated mouse event using the touch event's coordinates
		    simulatedEvent.initMouseEvent(
		        simulatedType,    // type
		        true,             // bubbles                    
		        true,             // cancelable                 
		        window,           // view                       
		        1,                // detail                     
		        touch.screenX,    // screenX                    
		        touch.screenY,    // screenY                    
		        touch.clientX,    // clientX                    
		        touch.clientY,    // clientY                    
		        false,            // ctrlKey                    
		        false,            // altKey                     
		        false,            // shiftKey                   
		        false,            // metaKey                    
		        0,                // button                     
		        null              // relatedTarget              
		        );

		    // Dispatch the simulated event to the target element
		    event.target.dispatchEvent(simulatedEvent);
		    }
		    mouseProto._touchStart = function (event) {
		    var self = this;
		    // Ignore the event if another widget is already being handled
		    if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {
		        return;
		        }
		    // Set the flag to prevent other widgets from inheriting the touch event
		    touchHandled = true;
		    // Track movement to determine if interaction was a click
		    self._touchMoved = false;
		    // Simulate the mouseover event
		    simulateMouseEvent(event, 'mouseover');
		    // Simulate the mousemove event
		    simulateMouseEvent(event, 'mousemove');
		    // Simulate the mousedown event
		    simulateMouseEvent(event, 'mousedown');
		    };

		    mouseProto._touchMove = function (event) {
		    // Ignore event if not handled
		    if (!touchHandled) {
		        return;
		        }
		    // Interaction was not a click
		    this._touchMoved = true;
		    // Simulate the mousemove event
		    simulateMouseEvent(event, 'mousemove');
		    };
		    mouseProto._touchEnd = function (event) {
		    // Ignore event if not handled
		    if (!touchHandled) {
		        return;
		    }
		    // Simulate the mouseup event
		    simulateMouseEvent(event, 'mouseup');
		    // Simulate the mouseout event
		    simulateMouseEvent(event, 'mouseout');
		    // If the touch interaction did not move, it should trigger a click
		    if (!this._touchMoved) {
		      // Simulate the click event
		      simulateMouseEvent(event, 'click');
		    }
		    // Unset the flag to allow other widgets to inherit the touch event
		    touchHandled = false;
		    };
		    mouseProto._mouseInit = function () {
		    var self = this;
		    // Delegate the touch handlers to the widget's element
		    self.element
		        .on('touchstart', $.proxy(self, '_touchStart'))
		        .on('touchmove', $.proxy(self, '_touchMove'))
		        .on('touchend', $.proxy(self, '_touchEnd'));

		    // Call the original $.ui.mouse init method
		    _mouseInit.call(self);
		    };
		})(jQuery);
	</script>
</html>
